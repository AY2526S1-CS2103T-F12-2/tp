@startuml
title Participation command: parse ➜ model update ➜ persist ➜ UI refresh

actor User
participant "UI.CommandBox" as UI
participant "LogicManager" as Logic
participant "AddressBookParser" as ABP
participant "ParticipationCommandParser" as PCP
participant "ParticipationCommand" as PCmd
participant "Model" as Model
participant "AddressBook" as AB
participant "Person" as Person
participant "ParticipationHistory" as PH
participant "StorageManager" as Storage
participant "JsonSerializableAddressBook" as JSAB
participant "JsonAdaptedPerson" as JAP
participant "PersonListPanel / PersonCard" as UIList
participant "ParticipationViewModel" as VM

== User enters command ==
User -> UI : type "participation n/Alex Yeoh d/2025-09-19 s/3"\npress Enter
UI -> Logic : execute(cmdText)

== Parse to command ==
Logic -> ABP : parseCommand(cmdText)
ABP -> PCP : parse(args)
PCP --> Logic : ParticipationCommand

== Execute ==
Logic -> PCmd : execute(model)

group Validate inputs
  PCmd -> PCmd : normalizeName()\nparse date & score\n(throw on invalid)
end

PCmd -> Model : getAddressBook()
Model --> PCmd : AddressBook
PCmd -> AB : getPersonList()
PCmd -> Person : locate by normalized name
PCmd -> Person : getParticipation()
Person --> PCmd : ParticipationHistory
PCmd -> PH : add(ParticipationRecord)\n• replace if same date\n• keep last 5\n• sort by date asc
PCmd -> Model : updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS)
PCmd -> Model : getAttendanceIndex().setCurrentUiDate(date)
PCmd --> Logic : CommandResult("Success: Participation recorded …")

== Persist ==
Logic -> Storage : saveAddressBook(model.getAddressBook())
Storage -> JSAB : new(source)
JSAB -> JAP : map each Person ➜ JsonAdaptedPerson\n(including participation [])
JAP --> JSAB : JSON-ready nodes
Storage --> Logic : OK

== UI refresh ==
Logic --> UI : CommandResult
UI -> UIList : observe filtered list change\nrefresh rendered PersonCard(s)
UIList -> VM : update(date headers MM-dd,\nscore boxes newest at right)
@enduml
